// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { supabaseConfig } from '@/config';

// Usando as configurações do arquivo config.ts
const SUPABASE_URL = supabaseConfig.url;
const SUPABASE_PUBLISHABLE_KEY = supabaseConfig.anonKey;

const isBrowser = typeof window !== 'undefined';

// Verificar se as configurações estão definidas
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Configurações do Supabase não estão definidas corretamente');
}

console.log('Conectando ao Supabase URL:', SUPABASE_URL);

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: isBrowser ? localStorage : undefined,
      flowType: 'pkce',
      detectSessionInUrl: false,
      debug: process.env.NODE_ENV === 'development'
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
  }
);

// Função para verificar se o usuário está autenticado
export const isAuthenticated = async (): Promise<boolean> => {
  try {
    const { data } = await supabase.auth.getSession();
    return !!data.session;
  } catch (error) {
    console.error('Erro ao verificar autenticação:', error);
    return false;
  }
};

// Função para obter o ID do usuário atual
export const getCurrentUserId = async (): Promise<string | null> => {
  try {
    const { data } = await supabase.auth.getSession();
    return data.session?.user?.id || null;
  } catch (error) {
    console.error('Erro ao obter ID do usuário:', error);
    return null;
  }
};
